# 8. Section intro
- create a simply calculator project
- test basic functions using Jasmine
- use suites, specs, expectations, disable suites, pending specs

# 9. Course project
- three components:
1. title
2. formula field
3. answer

# 10. Let's build it!
- create [calc.js]
- "JavaScript class function constructor"
- think of function constructor as class definition
## add methods of the four operators +-*/ to it
- "signatures of our functions"
- define a [total] property for when we create instances of calculator, and initialize it as zero

[
function Calculator () {
    this.total = 0;
}

Calculator.prototype.add = function(number) {
    return this.total = number += this.total;

}
]

[[RESULT]]
let calculator = new Calculator();
undefined
calculator.add(5);
5
calculator.subtract(2);
3
calculator.multiply(2);
6
calculator.divide(2);
3


## disallow 0 as a number for division so Infinity cannot be the result
Calculator.prototype.divide = function(number) {
    if (number === 0) {
        throw new Error('Cannot divide by zero');
    }
    
    return this.total = this.total /= number;

}

[[RESULT]]
let calculator = new Calculator();
undefined
calculator.add(5);
5
calculator.divide(0);
calc.js:22 Uncaught Error: Cannot divide by zero
    at Calculator.divide (calc.js:22)
    at <anonymous>:1:12


# 11. Programming the UI
- add [input] and [div] to [simple-calc.html] for expression to calculate and result respectively
- create [main.js]
- use [onchange] event to trigger main.js
- box of the expression we want to calculate 
- pass it the value the inputValue has
- the result that will be changing

## calculator will only be dealing with two numbers, so need a way to extract them from input
const numberA and numberB
- will be using a regex
- "regular expression javascript" --> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
- go to https://regex101.com/ to construct the expression that matches the operator in entries like 1+2 and 1*2
- built this from above: \+|\-|\*|\/
- use it to create the following wrapped in slashes [const expression = /\+|\-|\*|\//;]
- look up string prototype in documentation, use [string.prototype.split()]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
- [const numbers = inputValue.split(expression)] because we are capturing the operator in the pattern match of [expression]
- add [debugger;] flag to pause code at that line
- now we've confirmed the numbers are being captured in the array, so we can assign the numberA and numberB values
- however, these are strings, so use [parseInt] method to convert them
- to create the operation line, use [string.prototype.match();] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match
[const operation = inputValue.match(expression);]
- use [debugger;] again to check values
- confirmed [operation] value is array position 1, so now can build calculator
- update simple-calc.html to update Result X value from calculated value


# 12. Improving errors
- use Number.isNaN(numberA) boolean results as smart way of validating input


# 13. Styling the UI (optional lecture)
- create [style.css]
- add .body, .title, and .input classes
- add <link> tag and their relationship, which is stylesheet in [simple-calc.html]
- add body, input, and title class tags
- test, confirm good, then add some rules to stylesheet

## find robotto font for body
- https://fonts.google.com/specimen/Roboto?selection.family=Roboto&sidebar.open
- copy the link tag <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
- paste under custom stylesheet in [simple-calc.html]
- then apply font family rule to desired target in [style.css]

## change background color 2:51
- search for "material color palette"
- go to https://www.materialui.co/colors site, pick a color: #455A64
- add to .body class as background

## center, cap, and enlarge title

## change title color by using below site to find colors that go with it
- search for "paletton" --> http://paletton.com/
- use 818F95 for title's color rule

## style the input
- set input width to 100%, change font size, center it
- add padding to separate text from border

## style the result
- add padding and color to input class
- use same color as background

## change input field background color
- use the title color

## make border 1px and solid
- and white #FFF

## give input field a default value using a placeholder
- create impression the default result of 3 was calculated
- add placeholder and value
- delete the default value and it shows "Enter operation" placeholder

## give Result a real life feel as well
- wrap it in a div to give it its own line
- and can style it separately now
- add title class to it
- add new [result=container] class for styling whole container
- close preceding input tag

## add the title property since there is no label attached to/above input

## add result-container class to style
- borrow the same properties of existing input class
- check it out by saving after just adding the result-container class name to the input class name list

## next overwrite properties specific to container
- fix title using [.result-container .title] class
- make it black #000
- since too big, over-ride the 48 from the input result container class
- center it

## now separate the containers with 50px
- add [margin] to result-container
- also want to center it with [auto 0]

## change width so result field is smaller than operation field
- use [width: 50%] to work with auto 0 shorthand
- the [auto 0] is an auto 0 left margin shorthand that allows the width percentage to work

# 14. Setting up jasmine
- download or use existing download of Jasmine
- [SpecRunner.html] is a template for starting off with specs and source code
- rename this to [spec-runner.html] to match the naming convention of our project files
- [console.js] is the spec reporter not being used in this lecture
- copy the following lib subfolder files to a lib subfolder in the project folder
[
boot.js
jasmine.css
jasmine-html.js
jasmine.js
]

## customize spec-runner.html
- change title to Simple Calculator
- remove favicon link
- update paths to lib path
- remove src and spec file references
- add <!--TODO: Include our own specs (over next few lectures) -->
- open and confirm output:

[[RESULT]]
Incomplete: No specs found, , randomized with seed 39827

## of the three files loaded by confirming the above output, [jasmine.js] is most important
- has all the methods we'll be using (e.g. Spy) which are the pieces of the framework that make unit testing possible
- version at very bottom

## [jasmine-html.js] is just a reporter
- [jasmineRequire.HtmlReporter] this reporter defines the format to show our specs of pass and fail and the details of the errors
- looking at the [spec-runner.html], there is nothing in the body; yet, it displays all the found elements based on what is in [jasmine-html.js]
- add elements to the page to create the report for the specs
- can be changed to a different reporter, but this will do

## [boot.js] starts all the configuration needed for the framework
- "the glue of the framework"
- starts everything we need to run Jasmine and to discover and run our specs

## [jasmine.css] optionally used for styling of the report and spec runner


# 15. Suites
- creating our first Jasmine [suite]
- [calculator.js] contains the core functionality of the project and will be the first file we'll be unit testing

## naming conventions of the files
- spec file extensions, common file extensions for unit test files:
*.spec.js
*.test.js
- think of spec and test as synonymous
- "spec is short for specification"
- for Jasmine, we'll be using [*.spec.js]
- if we were testing TypeScript, a superscript of JavaScript, the test files would be [*.spec.ts]
- spec file name is based on target file name (e.g. [calc.spec.js]); this keeps the files together in the file tree

## create calc.spec.js

## Suites
- group of specs/tests
- organizes our specs

## create first suite
- use global [describe] method
- don't need to type jasmine.describe
- don't need to important
- globally available as [describe('');]
- the [describe] method receives two parameters: 1. description/titlee of suite 2. anonymous function executed as part of suite
[describe('This is shown in the reporters!', function() {

});]
- doesn't display description in spec-runner.html, because we need to include the specs as part of the spec-runner so it can discover the suites inside of them
[   <script src="calc.spec.js"></script>]
- now it displays the following result:
[[RESULT]]
Incomplete: No specs found, , randomized with seed 30385
This is shown in the reporters!

### place specs in function body
- first, change title/description of suite to filename of target file (NAMING CONVENTION OF COURSE)
- makes navigation easy when looking at the reporter
- each suite defined is listed in the spec-runner report page


# 16. Specs
- suite of specs listing expectations
- [it] should be considered first word describing spec
[
    describe('calc.js', function() {
    it('should add numbers to total', function() {
        // TODO: Expectations

    });

    it('should subract numbers to total', function() {
        // TODO: Expectations

    });
    ...
    .
    .
    .
]

[[RESULT]]

finished in 0.022s
4 specs, 0 failures, randomized with seed 51526
calc.js
SPEC HAS NO EXPECTATIONS should add numbers to total
SPEC HAS NO EXPECTATIONS should divide numbers to total
SPEC HAS NO EXPECTATIONS should subract numbers to total
SPEC HAS NO EXPECTATIONS should multiply numbers to total

# 17. Expectations
- think of them as [assertions]
- assertions - just statements, resulting in True or False
- e.g. 5 + 5 = 10
- [expect] 5 + 5 [to be] 10
- result is True
- format of expectation above
- writing it in Jasmine:
- chain the [expect] spec with a [toBe] [matcher]
[
    const calculator = new Calculator();
    calculator.add(5);
    expect(calculator.total).toBe(5);
]

[[RESULT]]
4 specs, 1 failure, randomized with seed 00639
Spec List | Failures
calc.js > should add numbers to total
ReferenceError: Calculator is not defined

- reason: need to include the src in [spec-runner.html], adding calc.js BEFORE the spec

## passing and failing specs (it)
- Passing Spec = Spec with ALL TRUE Expectations
- Failing Spec = Any ONE FAILED Expectation
- Spec is body within in [it] method
    it('should add numbers to total', function() {
        const calculator = new Calculator();
        calculator.add(5);
        expect(calculator.total).toBe(5);
        //expect(10).toBe(11);

    });
- now complete specs of other methods
- create an instance of calculator for every expectation, since specs can run in any order, and want to isolate specs from each other
    it('should subract numbers to total', function() {
        const calculator = new Calculator();
        calculator.total = 30;
        calculator.subtract(5);

        expect(calculator.total).toBe(25);
    });
- final one is to divide [10:30]
 

# 18. Disabled specs and disabled suites
- Disabled Spec - reports as Pending, will not be executed
- Common Cases: 1. disable while updating code and enable after ready to expect pass 2. TDD test-driven development
- just put [x] in front of it:
[
        xit('should add numbers to total', function() {
]

[[RESULT]]
4 specs, 0 failures, 1 pending spec, randomized with seed 54799
calc.js
should divide numbers into total
should subract numbers from total
should multiply numbers by total
should add numbers to total PENDING WITH MESSAGE: Temporarily disabled with xit

- disabling all specs inside of suite: all specs marked as Pending, not executed
- put [x] in front of describe
- ACTUALLY specs are NOT marked as Pending (just grayed out)
- Pending status will display for Spec only when temporarily disabled with [xit]


# 19. Section summary


# 20. Section notes
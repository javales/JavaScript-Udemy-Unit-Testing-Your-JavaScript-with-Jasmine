# 49. Section intro
- Jasmine spies are important for isolating dependencies
- Spy matchers
- Configuring spies to isolate depencies
- Spying on properties known as getters and setters
- Cannot spy on properties other than getters and setters

# 50. Jasmine spies
- [main.js] has a function called calculate()
- has dependencies in calling external methods (like Calculator->add() and Calculator->multiply())
- failures of these dependencies can cause failures on calculate()
- need to fix this by isolating these dependencies
- main.js' updateResult() is also a dependency

## spies - create test doubles and help us isolate dependencies for true unit testing

### Test Double
- object that can stand in for a real object in a test
- like a movie actor stunt double
- replace dependencies in our suite
- makes failures easier to identify/isolate
- test double functions are called [spies]
- in other frameworks, they are called [test doubles]
- a [spy] can create a test double for any function
- a spy only exists in the [describe] or [it] block in which it is define and is removed after each [spec]
- spy is not shared between different [describes] or [specs]
- behavior can be shared with spies using setup and teardown methods

### Special Matchers for Spies
- 3 Main Matchers:
toHaveBeenCalled
toHaveBeenCalledWith
toHaveBeenCalledTimes


# 51. Spying on functions
- writing spec bodies for xit'd specs in [main.spec.js]
- because [main.js]'s updateResult method is a global method, it lives in the window object
- therefore, use the [spyOn()] function which receives two parameters
1. object that contains the method you want to spy upon - in this case, our window object
2. string which is the name of the method
- we've just created a spy on this method where when this is executed just for this spec, updateResult, the real method is not called
- can optionally be explicit about that and call the [and.stub();] method which tells Jasmine to create a spy, inject it on updateResult, replace the updateResult implementation, and do not do/return/call anything, just track the calls on it, spy on the method and internal calls but don't do anything else
- have created our first spy and first dependency we're isolating, because even if updateResult were not working, this spec is going to continue and it will be valid

## how do we know updateResult was called and if an expression was not recognized
- have to use special spy matchers


# 52. toHaveBeenCalled
- evaluating if spy has been called
- use [toHaveBeenCalled] matcher
- first create typical [spec] method (expect())
- first thing passed to expect method is our spy -- (window.updateResult) -- since that was where the spy was installed
- then change our matcher -- toHaveBeenCalled();
- this evaluates to this spy has been called at least once when calculate is executed
- now see it in action without calling the calculate method -- by no longer using [calculate('a+3')] -- which we expect to fail
- next call it by execute the calculate method -- by uncommenting the above

## repeat for the two other conditions where 'Expression not recognized'
- for better coverage
- first, update title to 'validate expression when the FIRST number is invalid'
- then, SECOND
- then, '...when operation is invalid' like when using valid numbers BUT an INVALID operator
- spy has now been called for each of these


# 53. toHaveBeenCalledWith
- because toHaveBeenCalled matcher is not specific enough to determine if that call was "this" (updateResult('Expression not recognized');), need to find help with another matcher
- but first, remove [.and.stub()] for second and third spec for [calculate] method
- this is because .and.stub() is the default for [spyOn]
- forces it to not do nor return anything
- but if you omit, it behaves exactly the same
- add a comment to make a note of this

## use second expectation to assert that is has been called with the string 'Expression not recognized'
- use the same spec and pass the spy as the parameter (window.updateResult) the object and the method then the matcher is toHaveBeenCalledWith
- toHaveBeenCalledWith() matcher receives a parameter
- parameter is argument expected to be received by the real method (in this case 'Expression not recognized.') -- add a dot just to see this fail
- then remove . and confirm good
- include same in second and third spec


# 54. toHaveBeenCalledTimes
- third spy matcher - toHaveBeenCalledTimes
- in [main.js], updateResult was called just ONCE
- the two matchers we already used don't specify how many times the spy has been called
- sometimes you have to make sure certain calls occur just a number of times (for loop, for example)
- since we're calling it just once, we will use toHaveBeenCalledTimes
- parameter is number of times something is called


# 55. Spying on prototypes
- so far spied on concrete instances like window and methods on those concrete instances
- but we don't have access to main.js's [const calculator = new Calculator();
]

## [it('calls add', function() {})]
- start by defining our spy
- spy on 'add'
- pass an expression that will trigger calculate
- then add expectations
- "calculator is not defined"
- change to [spyOn(Calculator.prototype, 'add');]
- "SPEC HAS NO EXPECTATIONS calls add"
- note there are TWO calls to [add] in main.js
- so [expect(Calculator.prototype.add).toHaveBeenCalledTimes(2);]
- ANOTHER way to define the expectation:
- define a [spy] variable and don't have to called the prototype.add method anymore
- now let's add more expectations:
- toHaveBeenCalledWith the first number numberA in [calculator.add(numberA);
]
- so looking at [calculate('3+4');] just about this expectation, we can expect this number to be 3
- the order for toHaveBeenCalledWith doesn't matter, so the next line would be:
- set it 5 to see failed expectation
- set to 4 to match the actual expected integer

## moving on to next three specs defined but not implemented (subtract, multiply, and divide)
- start the bodies the same way as 'add'
- for multiply, include a not.toHaveBeenCalledWith(3)

## next implement [divide] spec
- all include a .not. like above
- drop the ... didn't have a default switch case in my code to match the lecture where he deleted it because the condition would never apply


# 56. callThrough
- because default has been removed from the main.js switch case, can delete the spec: [xit('validates operation');]
- that's because the operation is already validated

## looking at the final call: [updateResult(result);]
- sometimes when calling a spy, you want to execute the REAL implementatioon
- in true unit testing, you never call the real function
- but sometimes, you need to "callThrough" 
- so, add a spy on multiply BUT call the REAL implementation
DIDNOTGETTHEPOINTOFTHISATALL


# 57. callFake

# 58. returnValue

# 59. returnValues

# 60. Spy and throwError

# 61. Using getters

# 62. spyOnProperty

# 63. Section summary

# 64. Section notes
# 21. Section intro

# 22. What is a matcher
- Matcher - a function for boolean comparison between actual value and expected value
- responsible for reporting to Jasmine if expectation is True vs False
- search for toBe() method in jasmine.js to see how it works


# 23. toBe
- go to https://jasmine.github.io/api/3.5/global
- === vs ==
- === compares both value and type


# 24. toEqual
- uses "deep equality comparison" per above site
- ensures objects have equal keys and values
- compares any number of values
- "objects are compared by reference"
- also uses strict comparison ===
- create expectation that it 'has constructor' DON'TGETTHIS


# 25. toBeTruthy, toBeFalsy
DON'TGETTHIS
- change "has a constructor" to "can be instantiated"


# 26. Negating matchers
- not. before the matcher


# 27. toBeDefined, toBeUndefined
- "undefined" variable has 3 properties
1. global property
2. primitive - data that is not an object, and has no methods
3. automatically assigned to variables that have just been declared (AND not initialized?)

## toBeUndefined() matcher
[
    expect(result).toBeDefined();

    const calculator = new Calculator();

    expect(calculator.add).toBeDefined();   // or not.toBeUndefined();
    expect(calculator.subtract).not.toBeUndefined();    // or not.toBeUndefined();
    expect(calculator.multiply).not.toBeUndefined();    // or not.toBeUndefined();
    expect(calculator.divide).not.toBeUndefined();      // or not.toBeUndefined();

]

## toBeDefined() matcher instead of .not'ing the toBeUndefined() matcher


# 28. toBeNull
- to declar an intentional absence of a value
[
    let test = null;
]

WHAT'STHEPOINTOFASSOCIATINGOVERWRITINGWITHSETTINGTONULL???

[
    calculator.total = null;
    expect(calculator.total).toBeNull();
]


# 29. toContain
- can be used to find an item in an [array]
- can be used against a [string] to find a [substring]
- above are two common cases for this matcher
- type is an [object]

## revisiting the Calculator constructor
let calculus = new Calculator();
undefined

calculus.constructor
Æ’ Calculator () {
    this.total = 0;
}

calculus.constructor.name
"Calculator"

## above shows how Calculator constructor has a string as the name value; so we can test for a substring of this in [canbeinstantiated] spec
[
    calculator.constructor.name /* Calculator */).toContain("Calcu");
]

# 30. toBeNaN
- global property/scope (NaN: NaN) that represents NaN
- lives in [window] object --> [window.NaN]
- a matcher exists because you cannot compare NaN to NaN, because [NaN == NaN and NaN === NaN] both evaluate to [false]
- to evaluate a true NaN comparison: [Number.isNaN(NaN);]
- since we don't require [number] to be a number in the [multiply] method, we expect the result of passing in a string to be NaN
[

]
[
    expect(thing).toBeNaN();
]

# 31. toThrow, toThrowError
- referring back to "divide" method:
[
    Calculator.prototype.divide = function(number) {
    if (number === 0) {
        throw new Error('Cannot divide by zero');
    }
    
    return this.total = this.total /= number;

}
]
- displays our custom error meessage of 'Cannot divide by zero'
[
const calculator = new Calculator();
undefined
calculator.total = 20;
20
calculator.divide(0);
calc.js:22 Uncaught Error: Cannot divide by zero     <----
    at Calculator.divide (calc.js:22)
    at <anonymous>:1:12
]

## toThrow(expectedOpt)
- "[expect] a function to [throw] something"
- can either specify the value of what's thrown, or not specify and it will verify that something was thrown
- Example:
[expect(function() { return 'things'; }).toThrow('foo');]
[expect(function() { return 'stuff'; }).toThrow();]

## use toThrowError(expectedOpt, messageOpt) to unit test our custom error messageOpt


# 32. toMatch
- toMatch(expected)
- [expect] the actual value to match a regular expression

EXAMPLES:
[expect("my string").toMatch(/string$/);]
[expect("other string").toMatch("her");] a regular expression without any shorthand
- go to https://regex101.com
- build [-?\d+] to match either positive or negative integer form 50 or -50

## add another spec for "returns total"
- remember to wrap -?\d+ in / and /
- can also check it using typeof to confirm 'number'


# 33. Other matchers
- go to https://jasmine.github.io/pages/docs_home.html
- then https://jasmine.github.io/api/3.6/matchers.html for matchers available for that version


# 34. Match anything
- asymmetric matchers - not equal on each side
- [jasmine.anything] does NOT work for null or undefined


# 35. Custom matchers
- creating our own custom matchers when existing don't cover what we need
- Jasmine versions may break them
- create [custom-matchers.js]
- in spec, create placeholder in "can be instantiated" for // expect(calculator).toBeCalculator(); // where toBeCalculator is our custom matcher
DON'TGETTHISATALL


# 36. Update on third party matchers! Read before the next lecture.
Update on third party matchers! Read before the next lecture.
ðŸ‘‹ Hello!
I am happy you have made it here! I hope you have enjoyed the course so far. If you have! follow me on twitter, tweet about it! tag me, let me know! @JuanLizarazoG - I love hearing your feedback.

âœ… Lecture update
I open a file from a GitHub repository in the next lecture, but that file is no longer there. You can find it through releases and version 3.8 but to make things easier, I put it here for you:

https://raw.githubusercontent.com/juanlizarazo/jasmine-casts/master/assets/jasmine-matchers.js

Go to this link, open the file, right-click to save as and save it to a location where you can easily access it in the next video!


# 37. Third party matchers
- look at "returns total" spec
- add [toBeNumber();] and see how error says [toBeNumber is not a function]
- look up https://raw.githubusercontent.com/juanlizarazo/jasmine-casts/master/assets/jasmine-matchers.js
- save it project's /lib folder
- include it in spec-runner.html
- required to put it AFTER [jasmine.js]
- put it after [boot.js]

- in [custom-matchers.js], the first [property] we'll have is the [toBeCalculator] matcher
- [actual] holds value of calculator


# 38. Section summary


# 39. Section notes
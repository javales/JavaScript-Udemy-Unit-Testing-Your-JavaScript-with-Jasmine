# 40. Section intro

# 41. Recommendations to organize our specs
- use [describe] which is a method that groups specs into a [suite]
- use naming convention of matching spec file name to the source file (JavaScript file) you are testing
- maintain a folder structure
- nest suites


# 42. Nesting suites
- we can't easily see what the specs are testing inside calc.js 
- nesting suites helps with that

## open calc.js 
- We have a "function constructor" and our constructor is [Calculator]
- can see Calculator as our class

## open calc.spec.js
- Add a describe that describes our function constructor/class [Calculator] as our first nested suite
- start by adding all of our specs inside of this suite
- the report now reflects the nested [Calculator] suite within the [calc.js] suite
- reflects how the function constructor/class [Calculator] has 12 specs

## now start another suite inside Calculator suite
- third level to the report
- describes [specs] for [methods] inside Calculator [function constructor]
- create suites for each method, using () to indicate in the report that it's a function
- move specs under each corresponding 3rd-level suite
- other specs belong to Calculator function constructor itself, not specific to a single method, so those are put on top before the first 3rd-level suite


# 43. Setup and teardown
describe() <-- suite
    beforeAll() <-- before all specs as a group
    beforeEach() <-- before each spec within groups
    afterAll()
    afterEach()

    it()
    it()
    it()


# 44. beforeEach, afterEach
- use a setup method Jasmine offers - beforeEach - for initializing our instance of the calculator 
- executed before the specs run, so initialize after 2nd-level suite but before 3rd-level suite
- anonymous function as first argument 
- also make afterEach()
- define a variable for the parent suite available to all suites underneath
[
    let calculator;
    let calculator2;
]
- then initialize the calculator variables inside the beforeEach()
- then remove all the individual initialization instances in the specs
- for afterEach, nothing needed at the moment; examples might be clean-up for calculator


# 45. beforeAll, afterAll
- unit test the [calculate] and [updateResult] functions of [main.js]
- create [main.spec.js]
- describe the two suites to unit test the two methods
- create placeholders for the specs we need to define for the suites
- write a couple [it]'s for what we want to unit test inside these two methods
- saving changes nothing since new spec file isn't included in spec-runner.html yet
- remember to place the source files before the spec files in the [spec-runner.html]
- now can see spec with no body in calculate() suite as pendind spec (based on yellow text)
- now mark the spec as an [xit], and now shows it as temporarily disabled pending spec

## get rid of 5 in DOM using lifecycle method
- add an [afterAll()] at the beginning of the updateResult() suite
- place in it the clean-up task for the 5 in the DOM
- confirm the junk no longer remains after running our test

## move the element dependency into a beforeAll()
[
    const element = document.createElement('div');
            element.setAttribute('id', 'result');

            document.body.appendChild(element);
]
- take above out of the 'adds result to DOM element' spec

# need to share the state of [element] in beforeAll()
- element is not defined, as shown by error
- define a scope let element
- remove the const definition from thee beforeAll()'s statement


# 46. Jasmine and the [this] keyword
- jasmine allows us to make a variable available to the three blocks without defining a variable
- remove the let definition and put the const definition back
- use [this.element = element;] which allows references to state that Jasmine will keep and make available to our different blocks
- refreshing shows element is not defined

## fix by adding this. to each element reference
- for afterAll(), can remove element definition altogether

## can update suites to share state between blocks
- but leaving calc.spec.js as is with beforeEach as is to leave examples in place for all strategies

## important point about using [this] to share state
- relates to function keyword
- if change anonymous function to arrow function in suite updateResult(), 
- DIDNOTUNDERSTANDPOINTSMADEABOUTARROWFUNCTIONS

# 47. Section summary
# 40. Section intro

# 41. Recommendations to organize our specs
- use [describe] which is a method that groups specs into a [suite]
- use naming convention of matching spec file name to the source file (JavaScript file) you are testing
- maintain a folder structure
- nest suites


# 42. Nesting suites
- we can't easily see what the specs are testing inside calc.js 
- nesting suites helps with that

## open calc.js 
- We have a "function constructor" and our constructor is [Calculator]
- can see Calculator as our class

## open calc.spec.js
- Add a describe that describes our function constructor/class [Calculator] as our first nested suite
- start by adding all of our specs inside of this suite
- the report now reflects the nested [Calculator] suite within the [calc.js] suite
- reflects how the function constructor/class [Calculator] has 12 specs

## now start another suite inside Calculator suite
- third level to the report
- describes [specs] for [methods] inside Calculator [function constructor]
- create suites for each method, using () to indicate in the report that it's a function
- move specs under each corresponding 3rd-level suite
- other specs belong to Calculator function constructor itself, not specific to a single method, so those are put on top before the first 3rd-level suite


# 43. Setup and teardown
describe() <-- suite
    beforeAll() <-- before all specs as a group
    beforeEach() <-- before each spec within groups
    afterAll()
    afterEach()

    it()
    it()
    it()


# 44. beforeEach, afterEach

# 45. beforeAll, afterAll

# 46. Jasmine and the [this] keyword

# 47. Section summary